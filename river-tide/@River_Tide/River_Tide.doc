predict tide in a backwater affected river with a sloping/varying bed

Assumptions and capabilities:
	- tidal dynamics follow the 1D-Shallow-Water-Equation
	  (depth and cross-sectionally averaged Navier-Stokes-Equation)
	- rectangular cross section
	- width can vary along the channel
	- friction coefficient (cd) constant along channel and over time (Chezy)
	- advective accelleration term is considered, but can be deactivated
	- vertical profile of streamwise velocity is constant
	  (Boussinesq coefficient is unity (1))

Limitations / TODO list:
	- single channel dynamics only (no tidal networks)
	- no wind-shear stress (no storm surges)
	- no tidal flats / intertidal areas (width constant in time)
	- no flood-plain during high-river flow
	- no stratification or along-channel salinty gradient
	- negligible head loss in channel bends
	- negligible feed-back of the sediment concentration on the propagation of the tide
	- low Froude Number (no hydraulic jumps due to cataracts or tidal bores)	

- At present, only two tidal components are supported
  (either D1 with D2 or D2 with D4, in addition to the mean water level z0),
  for mixed diurnal-semidiurnal cases with dominant semidiurnal component,
  the class has to be extended to support three components (D1, D2 and D4)

- At present, the tripel overtide is not computed (D3 for diurnal, D6 for semindiurnal tide),
  note that this is the main overtide for the case of low river flow

- At present, the 1/h non-linearity is only included in the approximations of
  the backwater curve, but not it's influence on the tidal frequency components

Method:

This class calls numerical solvers for second order ordinary differential
equation boundary value problems

Tides is represented as exponential series in form of total discharge Q = sum Q_i = Q_0 + Q_1 + Q_2,
as discharge is conserved (balanced), the equations are simpler than for level z and velocity u,
and the frequency components of z are straight forward determined by differentiation of Q

Class and function structure:
	River_Tide :
		computes river tide, provides the ode coefficients to the boundary value solver
	bvp2c, bvp2fdm :
		solve the underlying second order boundary value problem
	River_Tide_Map :
		provides convenient batch runs and processing of River_Tide instances

Minimum working example, c.f. example_rive_tide.m and example_river_tide_map.m

	input:

	Q0    : scalar, river discharge (m^3/s)
	omega : scalar, angular frequency main tidal species in (1/seconds)
	x     : 2x1 vector, left and right end of computational domain of the river (m)
	w(x)  : function of width along the river (m)
	cd(x) : function of drag coefficient along the river (1)
	zb(x) : function of bed level along the river (m)

	opt   : structure with options
	opt.model_str = 'wave' (other solver are not supported at the moment)
	opt.solver = @bvp2c or @bvp2fdm
	opt.nx : number of grid points along channel
	opt.ns : base for logarithmic spacing of grid points, 1 : linear spacing	

	bc  : structure array of boundary conditions
		r, row 1..2 : left and right end, respectively
		c, column 1 : mean (river) component
		          2..n : condition form column-1 frequency component

		(       q(1)*(p(1) y^-(x0) + p(2) dy^-/dx(x0) ...
                     +  q(2)*(p(1) y^+(x0) + p(2) dy^+/dx(x0) ) = bc(c,r).val
                           = val(0)

	bc(c,r).var : Quantity, either 'z' or 'Q'
	bc(c,r).val : complex amplitude of chosen variable
                      (c.f. (1 + 0i) [m] for surface elevation amplitude of 1m)
		      (value has to be real for mean component)
		      mean component requires z and Q to be specified at opposit ends
	bc(c,r).p   : factor for Dirichlet p(1) or Neumann p(2) condition
		      p = [1,0] : pure Dirichlet 
		      p = [0,1] : pure Neumann
		      sum of abs(p) must be nonzero for each end and each frequency component
	bc(c,r).q   : factor for left and right going wave, only available for bvp2c
		      q = [1,1] : total water level / discharge
		      q = [1,0] : only left going wave
		      q = [0,1] : only right going wave
		      q has no meaning for the mean component and is ignored
		      q is only supported by bvp2c,
                      bvpfdm uses default q = [1,1]
		      sum of abs(q) for each frequency component must be zero

